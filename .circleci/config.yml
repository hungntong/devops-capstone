version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udacity-backend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
      workflow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          # Add when this will runa
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/4hkvFqcN1Wuq35GLWsKF3r/migration_<<parameters.workflow_id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              # Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/base:2022.09
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd docker
             docker --version
      - save_cache:
          paths: [docker]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/base:2022.09
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
             cd frontend
             npm install
             npm run test
                
  test-backend:
    docker:
      - image: cimg/base:2022.09
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
             cd docker
             hadolint Dockerfile
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --force
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend scan
          command: |
             cd backend
             npm install
             npm audit fix
             npm audit fix --audit-level=critical --force
             npm audit fix --force
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity \
              --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Ensure EKS infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/cluster.yml \
      #         --tags project=udacity \
      #         --stack-name "udacity-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5a:fe:0a:f1:bd:16:54:bc:00:c5:96:40:5c:53:bd:c1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add tar
            apk add gzip
            apk add --update ansible
            python -m pip install --upgrade pip
            pip install awscli --upgrade 
      - run:
          name: Configure server
          command: |
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  lint-migration:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5a:fe:0a:f1:bd:16:54:bc:00:c5:96:40:5c:53:bd:c1"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]  
      - run:
          name: Copy env
          command: |
            echo DOCKER_USER=$DOCKER_USER >> ".env"
            echo DOCKER_PASSWORD=$DOCKER_PASSWORD >> ".env"
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add tar
            apk add gzip
            apk add curl
            apk add --update ansible
            python -m pip install --upgrade pip
            pip install awscli --upgrade 
      - run:
          name: Copy and Lint
          command: |
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt linting-startup.yml
      - run:
          name: Run migration
          command: |
            cd docker
            echo "has been executed successfully." > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            cd docker
            if grep -q "has been executed successfully." migrations_dump.txt
            then
                echo "insecure" >> ~/.curlrc
                curl https://kvdb.io/4hkvFqcN1Wuq35GLWsKF3r/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  build docker image:
    docker:
      - image: python:3.8
    steps:
      - checkout
      - run:
          name: Run unit tests
          command: |
            cd docker
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            pylint --disable=R,C,W1203,W1202 app.py
      - setup_remote_docker 
       
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Build Docker image
          command: |
            cd docker
            docker build -t skycrafter/capstone .

      - run:
          name: Push to Docker Hub
          command: |
            docker login --username "${DOCKER_USER}" --password "${DOCKER_PASSWORD}"
            docker push skycrafter/capstone

  deploy-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add tar
            apk add gzip
            apk add curl
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client            
      - run:
          name: create kubenetes cluster
          command: |
            eksctl create cluster --name eksCluster-${CIRCLE_WORKFLOW_ID:0:7} --nodes=4
      - run:
          name: Load Docker image
          command: |
            kubectl get nodes
            kubectl create deploy capstone --image=skycrafter/capstone
            kubectl get pods
            kubectl port-forward capstone 80:80
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]     
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Copying Env
      #     command: |
      #       cd backend
      #       echo ENVIRONMENT=$ENVIRONMENT > ".env"
      #       echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
      #       echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
      #       echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
      #       echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
      #       echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
      #       echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
      #       echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
      #       echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
      #       echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
      - run:
          name: "Check Dockerfile"
          command: |
            cd docker
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - run:
          name: Run migration
          command: |
            cd docker
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  echo "insecure" >> ~/.curlrc
                  curl https://kvdb.io/4hkvFqcN1Wuq35GLWsKF3r/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure 1
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}       

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo "$BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
      # - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:e3:e3:ad:86:f2:25:40:86:99:db:90:60:5c:29:34"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install -y ansible
            sudo apt install -y awscli
            # apk add --update ansible curl rsync openssh nodejs npm
            # ansible --version
            # pip install awscli
            # aws --version            
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            pwd
            ls -al
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
          no_output_timeout: 30m
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker imagea
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk update
            apk upgrade
            apk add --update ansible curl openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version  
      - run:
          name: Get backend url and smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo "$BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - attach_workspace:
          at: ~/
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo ${OldWorkflowID} >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure1
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git2
        - checkout
        - run:
            name: Install dependencies
            command: |
              # your code here
              yum install -y tar gzip unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
        - attach_workspace:
            at: ~/
        - run:
            name: Get and delete old stack workflow id
            command: |
              # your code here
              OldWorkflowID=$(cat ~/OldWorkflowID.txt)              
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
            

workflows:
  default:
    jobs:
      # - build-backend     
      # - deploy-infrastructure:
      #     requires: [build-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - lint-migration:
      #     requires: [configure-infrastructure]
      # - build docker image:
      #     requires: [lint-migration]
      - deploy-cluster
      #     requires: [build docker image]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]